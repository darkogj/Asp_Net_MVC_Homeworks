@model IEnumerable<HomeWorkApp3.Models.Equipment>

@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<div>
    <form action="~/Equipment/SearchResults">
        <input type="text" name="searchTerm" placeholder="Search equipment" class="form-control"/>
        <input type="submit" value="Filter" class="btn btn-default"/>
    </form>
</div>
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Name)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Description)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Category)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.AssignedTo)
        </th>
        <th></th>
    </tr>

@foreach (var item in Model)
{
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.Name)
        </td>
        <td>
            @{ var shortenedDescription  = ShortenTextIfMoreThan20Chars(item.Description); }
            @Html.DisplayFor(modelItem => shortenedDescription)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Category)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.AssignedTo)
        </td>
        <td>
            @Html.ActionLink("Edit", "Edit", new { id=item.ID }) |
            @Html.ActionLink("Details", "Details", new { id=item.ID }) |
            @Html.ActionLink("Delete", "Delete", new { id=item.ID })
        </td>
    </tr>
}
</table>

@{var currentAction = (string)ViewContext.RouteData.Values["action"];}

@if (currentAction == "Index")
{
    @Html.Action("AllAssignees")
}
else if (currentAction == "SearchByAssignee")
{
    @Html.Partial("_FilteredAssignee", Request.QueryString["assignee"])
}
else if (currentAction == "SearchResults")
{
    @Html.Partial("_Assignees", @Model.Select(i => i.AssignedTo).Distinct().ToList())
}


@functions {
    public string ShortenTextIfMoreThan20Chars(string value)
    {
        return value.Length <= 20 ? value : value.Substring(0, 20) + "...";
    }
}